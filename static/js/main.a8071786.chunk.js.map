{"version":3,"sources":["actions/types.js","App.js","actions/counterActions.js","reportWebVitals.js","reducers/counterReducer.js","reducers/loggedReducer.js","reducers/index.js","store.js","index.js"],"names":["INCREMENT","DECREMENT","App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","loggedReducer","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOACaA,EAAY,YACZC,EAAY,YCoBVC,MAjBf,WAEE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cAEjB,OACE,sBAAKC,UAAU,MAAf,UACE,6CACA,2CAAcN,EAAd,OACA,wBAAQO,QAAS,kBAAMH,ECZlB,CACHI,KAAMX,EACNY,QDUwC,KAA1C,eACA,wBAAQF,QAAS,kBAAMH,ECNlB,CACHI,KAAMV,KDKR,eACCK,EAAW,+CAAwB,OEL3BO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCMCQ,EAXQ,WAAsB,IAArBjB,EAAoB,uDAAd,EAAGkB,EAAW,uCACxC,OAAOA,EAAOZ,MACZ,KAAKX,EACH,OAAOK,EAAQkB,EAAOX,QACxB,KAAKX,EACH,OAAOI,EAAQ,EACjB,QACE,OAAOA,ICEAmB,EATO,WAA4B,IAA3BnB,EAA0B,wDAAXkB,EAAW,uCAC7C,OAAOA,EAAOZ,MACV,IAAK,UACD,OAAQN,EACZ,QACI,OAAOA,ICEJoB,EALKC,YAAgB,CAChCvB,QAAUmB,EACVhB,SAAWkB,ICEAG,EALDC,YACVH,EACAI,OAAOC,8BAAgCD,OAAOC,gCC2ClDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.a8071786.chunk.js","sourcesContent":["\r\nexport const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';","import React from 'react'\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { increment, decrement } from './actions/counterActions'\n\nfunction App() {\n\n  const counter = useSelector(state => state.counter)\n  const isLogged = useSelector(state => state.isLogged)\n  const dispatch = useDispatch()\n\n  return (\n    <div className=\"App\">\n      <h1>hello redux</h1>\n      <h1> Counter {counter} </h1>\n      <button onClick={() => dispatch(increment(3))}>+</button>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      {isLogged ? <p>Sensitive data</p> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","import { INCREMENT, DECREMENT } from './types'\r\n\r\nexport const increment = (n) => {\r\n    return {\r\n        type: INCREMENT,\r\n        payload: n\r\n    }\r\n}\r\n\r\nexport const decrement = () => {\r\n    return {\r\n        type: DECREMENT\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { INCREMENT, DECREMENT } from '../actions/types'\r\n\r\nconst counterReducer = (state=0, action) => {\r\n    switch(action.type){\r\n      case INCREMENT:\r\n        return state + action.payload\r\n      case DECREMENT:\r\n        return state - 1\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default counterReducer;","\r\n\r\nconst loggedReducer = (state = false, action) => {\r\n    switch(action.type){\r\n        case 'SIGN_IN':\r\n            return !state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggedReducer;","import counterReducer from './counterReducer'\r\nimport loggedReducer from './loggedReducer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    counter : counterReducer,\r\n    isLogged : loggedReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store'\n// import { createStore } from 'redux'\n\n// //STORE ...... GLOBALIZED STATE\n\n\n// //ACTION ...... Decide what to do, e.g, INCREMENT\n// const increment = () => {\n//   return {\n//     type: 'INCREMENT'         //action name or type\n//   }\n// }\n\n// const decrement = () => {\n//   return {\n//     type: 'DECREMENT'         //action name or type\n//   }\n// }\n\n// //REDUCER ...... What ACTION should be performed nd returns UPDATED STATE\n// const counter = (state=0, action) => {\n//   switch(action.type){\n//     case 'INCREMENT':\n//       return state + 1\n//     case 'DECREMENT':\n//       return state - 1\n//     default:\n//       return state\n//   }\n// }\n\n// let store = createStore(counter);\n\n// //displaying store in console:\n// store.subscribe(() => console.log(store.getState()));\n\n\n\n\n// //DISPATCH ...... sending an ACTION nd STATE to reducer\n// store.dispatch(increment())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}